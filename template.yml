AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"

Description: >
  A template for a serverless application that uses AWS Step Functions and AWS EventBridge

Parameters:
  StageName:
    Type: String
    Default: Prod

Globals:
  Function:
    Runtime: nodejs18.x
    Timeout: 60
    Tracing: Active
    Handler: lib/main.handler
    Environment:
      Variables:
        NODE_ENV: Production
        REGION: !Ref "AWS::Region"
        SSM_PARAMETER_STORE_PREFIX: github-boilerplate

Resources:
  EventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Join ["-", [ghas-notifier, !Ref AWS::StackName]]

  GitHubWebhookSecretValidator:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: functions/authorizers/githubWebhookSecretValidator
      Description: "A Lambda that validates a GitHub Secret"
      Environment:
        Variables:
          EVENT_BUS_NAME: !Ref EventBus
      Events:
        GatewayEndpoint:
          Properties:
            ApiId: !Ref HttpApi
            Method: POST
            Path: /github/webhook/validate
          Type: HttpApi
      Policies:
        - AmazonSSMReadOnlyAccess
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref EventBus

  GitHubWebhookIPValidator:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: functions/authorizers/githubWebhookIPValidator
      Description: "A Lambda Function that validates the IP comes from GitHub"
      Policies:
        - AmazonSSMReadOnlyAccess

  ExampleFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: functions/core/exampleFunction
      Description: "An example Lambda Function"
      Policies:
        - AmazonSSMReadOnlyAccess

  LambdaInvokeRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - "sts:AssumeRole"

  LambdaInvokePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "LambdaInvokePolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "lambda:InvokeFunction"
            Resource: !GetAtt GitHubWebhookIPValidator.Arn
      Roles:
        - Ref: "LambdaInvokeRole"

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      FailOnWarnings: True
      StageName: !Ref StageName
      AccessLogSettings:
        DestinationArn: !GetAtt APIAccessLogs.Arn
        Format: $context.requestId
      RouteSettings:
        "POST /github/webhook/validate":
          ThrottlingBurstLimit: 10
      Auth:
        Authorizers:
          LambdaAuthorizer:
            AuthorizerPayloadFormatVersion: "2.0"
            EnableSimpleResponses: true
            FunctionArn: !GetAtt GitHubWebhookIPValidator.Arn
            FunctionInvokeRole: !GetAtt LambdaInvokeRole.Arn
        DefaultAuthorizer: LambdaAuthorizer

  APIAccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName:
        !Join ["/", ["/aws/vendedlogs", !Ref AWS::StackName, "HttpApi", "logs"]]

  StateMachineLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName:
        !Join [
          "/",
          ["/aws/vendedlogs", !Ref AWS::StackName, "StateMachine", "logs"],
        ]

  StateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: stepfunctions/definition.yml
      DefinitionSubstitutions:
        ExampleFunction: !GetAtt ExampleFunction.Arn
      Type: EXPRESS
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StateMachineLogs.Arn
        IncludeExecutionData: true
        Level: "ALL"
      Events:
        EBRule:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref EventBus
            RetryPolicy:
              MaximumRetryAttempts: 2
            DeadLetterConfig:
              Type: SQS
              QueueLogicalId: DeadLetterQueue
            Pattern:
              source:
                - custom.kickOffStateMachine
              detail-type:
                - transaction
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref ExampleFunction
        - CloudWatchLogsFullAccess

Outputs:
  HttpApiUrl:
    Description: URL of the API
    Value:
      Fn::Sub: "https://${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${StageName}/"
  HttpApiId:
    Description: Api id of HttpApi
    Value:
      Ref: HttpApi
